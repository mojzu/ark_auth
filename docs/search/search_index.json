{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction Single sign-on authentication server. This main branch is intended to replace the master branch, it is still under development. Disclaimer I am not a security expert, I have made a best effort attempt to make this a secure piece of software. I am sure there are mistakes, and the code has not undergone any kind of review, use it at your own risk! For more established (and probably better) alternatives to this software see the following list. Keycloak ORY Kratos GoTrue PHP OAuth2 2.0 Server Now that I've explained what you shouldn't do, let me explain how to do it. Overview","title":"Introduction"},{"location":"#introduction","text":"Single sign-on authentication server. This main branch is intended to replace the master branch, it is still under development.","title":"Introduction"},{"location":"#disclaimer","text":"I am not a security expert, I have made a best effort attempt to make this a secure piece of software. I am sure there are mistakes, and the code has not undergone any kind of review, use it at your own risk! For more established (and probably better) alternatives to this software see the following list. Keycloak ORY Kratos GoTrue PHP OAuth2 2.0 Server Now that I've explained what you shouldn't do, let me explain how to do it.","title":"Disclaimer"},{"location":"#overview","text":"","title":"Overview"},{"location":"developer/start/","text":"Start Clone repository and Open folder in container , using the vscode Remote Development extension. Run vscode Tasks using the command palette or the Task Explorer extension. Configuration The sso_server and sso_cli binaries depend on a configuration file, by default this is read from ./.config/sso.toml or it can be configured with the --config command line argument (For example --config .config/sso.example ). An example configuration file can be found at .config/sso.example.toml . OAuth2 clients and users can be statically defined in this file, configuration can be generated using the sso_cli binary. A postgres database connection is required, the example configuration works with the postgres service started by the postgres - up task. Run the cargo - install task. To generate a client configuration run the following command, save the client secret key and copy the TOML output into the configuration file. sso_cli generate client $NAME $REDIRECT_URI to generate a user configuration run the following command, save the user password and copy the TOML output into the configuration file. sso_cli generate user $NAME $EMAIL Developing Run the following commands to compile and run tests during development, tests depend on Webdriver Manager . postgres - up cargo - sso_server npm - start client example (express, passport) npm - run host tests To stop and destroy postgres services. postgres - down Testing Run the following commands to build docker images and run tests for production, tests depend on Webdriver Manager . docker test - up docker test - protractor To stop and destroy test services. docker test - down Webdriver Manager Tests depend on Webdriver Manager , start it outside of the remote development container using the commands. npm run webdriver-update npm run webdriver-start pgAdmin Available at localhost:8000 when postgres services are running. Login with username guest and password guest Select Add New Server General - Name: postgres Connection - Host name/address: postgres Connection - Port: 5432 Connection - Maintenance database: postgres Connection - Username: postgres Connection - Password: postgres Connection - Save password: yes Save and select postgres from server list PgHero Available at localhost:8001 when postgres services are running.","title":"Start"},{"location":"developer/start/#start","text":"Clone repository and Open folder in container , using the vscode Remote Development extension. Run vscode Tasks using the command palette or the Task Explorer extension.","title":"Start"},{"location":"developer/start/#configuration","text":"The sso_server and sso_cli binaries depend on a configuration file, by default this is read from ./.config/sso.toml or it can be configured with the --config command line argument (For example --config .config/sso.example ). An example configuration file can be found at .config/sso.example.toml . OAuth2 clients and users can be statically defined in this file, configuration can be generated using the sso_cli binary. A postgres database connection is required, the example configuration works with the postgres service started by the postgres - up task. Run the cargo - install task. To generate a client configuration run the following command, save the client secret key and copy the TOML output into the configuration file. sso_cli generate client $NAME $REDIRECT_URI to generate a user configuration run the following command, save the user password and copy the TOML output into the configuration file. sso_cli generate user $NAME $EMAIL","title":"Configuration"},{"location":"developer/start/#developing","text":"Run the following commands to compile and run tests during development, tests depend on Webdriver Manager . postgres - up cargo - sso_server npm - start client example (express, passport) npm - run host tests To stop and destroy postgres services. postgres - down","title":"Developing"},{"location":"developer/start/#testing","text":"Run the following commands to build docker images and run tests for production, tests depend on Webdriver Manager . docker test - up docker test - protractor To stop and destroy test services. docker test - down","title":"Testing"},{"location":"developer/start/#webdriver-manager","text":"Tests depend on Webdriver Manager , start it outside of the remote development container using the commands. npm run webdriver-update npm run webdriver-start","title":"Webdriver Manager"},{"location":"developer/start/#pgadmin","text":"Available at localhost:8000 when postgres services are running. Login with username guest and password guest Select Add New Server General - Name: postgres Connection - Host name/address: postgres Connection - Port: 5432 Connection - Maintenance database: postgres Connection - Username: postgres Connection - Password: postgres Connection - Save password: yes Save and select postgres from server list","title":"pgAdmin"},{"location":"developer/start/#pghero","text":"Available at localhost:8001 when postgres services are running.","title":"PgHero"},{"location":"developer/tasks/","text":"Tasks all - clean Removes build artifacts. all - distclean Removes build artifacts and installed dependencies and their caches. cargo - install Installs sso_server and sso_cli into development container, which lets you run sso_cli ... instead of cargo run --bin sso_cli -- ... in the terminal. cargo - sso_server Build and start sso_server using configuration file .config/sso.toml , available at http://localhost:7042/ . docker test - build Build docker images in .devcontainer/docker-test.yml . docker test - up Build and start docker compose services in .devcontainer/docker-test.yml . docker test - down Stop and destroy docker compose services in .devcontainer/docker-test.yml . docker test - protractor Run Protractor tests against docker compose services in .devcontainer/docker-test.yml . mkdocs - serve Run mkdocs live development server, available at localhost:8079 . mkdocs - build Build mkdocs static site output in docs directory for github pages. npm - run template builder Build template files from sources in sso_test/template . The output file sso_test/tmp/template/index.html can be opened in a browser to check page styles, and sso_test/tmp/template/template.html can be added to the sso configuration file. npm - start client example (express, passport) Build and start client example application, available at localhost:8080 . npm - run host tests Run tests in sso_test/test/host.ts file. openapi - generate client Build TypeScript client using OpenAPI Generator . Binary sso_server must be running and available at http://localhost:7042/ . postgres - build Build docker images in .devcontainer/docker-postgres.yml . postgres - up Build and start docker compose services in .devcontainer/docker-postgres.yml . Connection string is postgres://postgres:postgres@localhost:5432/postgres . Services include pgAdmin and PgHero . postgres - down Stop and destroy docker compose services in .devcontainer/docker-postgres.yml .","title":"Tasks"},{"location":"developer/tasks/#tasks","text":"","title":"Tasks"},{"location":"developer/tasks/#all-clean","text":"Removes build artifacts.","title":"all - clean"},{"location":"developer/tasks/#all-distclean","text":"Removes build artifacts and installed dependencies and their caches.","title":"all - distclean"},{"location":"developer/tasks/#cargo-install","text":"Installs sso_server and sso_cli into development container, which lets you run sso_cli ... instead of cargo run --bin sso_cli -- ... in the terminal.","title":"cargo - install"},{"location":"developer/tasks/#cargo-sso_server","text":"Build and start sso_server using configuration file .config/sso.toml , available at http://localhost:7042/ .","title":"cargo - sso_server"},{"location":"developer/tasks/#docker-test-build","text":"Build docker images in .devcontainer/docker-test.yml .","title":"docker test - build"},{"location":"developer/tasks/#docker-test-up","text":"Build and start docker compose services in .devcontainer/docker-test.yml .","title":"docker test - up"},{"location":"developer/tasks/#docker-test-down","text":"Stop and destroy docker compose services in .devcontainer/docker-test.yml .","title":"docker test - down"},{"location":"developer/tasks/#docker-test-protractor","text":"Run Protractor tests against docker compose services in .devcontainer/docker-test.yml .","title":"docker test - protractor"},{"location":"developer/tasks/#mkdocs-serve","text":"Run mkdocs live development server, available at localhost:8079 .","title":"mkdocs - serve"},{"location":"developer/tasks/#mkdocs-build","text":"Build mkdocs static site output in docs directory for github pages.","title":"mkdocs - build"},{"location":"developer/tasks/#npm-run-template-builder","text":"Build template files from sources in sso_test/template . The output file sso_test/tmp/template/index.html can be opened in a browser to check page styles, and sso_test/tmp/template/template.html can be added to the sso configuration file.","title":"npm - run template builder"},{"location":"developer/tasks/#npm-start-client-example-express-passport","text":"Build and start client example application, available at localhost:8080 .","title":"npm - start client example (express, passport)"},{"location":"developer/tasks/#npm-run-host-tests","text":"Run tests in sso_test/test/host.ts file.","title":"npm - run host tests"},{"location":"developer/tasks/#openapi-generate-client","text":"Build TypeScript client using OpenAPI Generator . Binary sso_server must be running and available at http://localhost:7042/ .","title":"openapi - generate client"},{"location":"developer/tasks/#postgres-build","text":"Build docker images in .devcontainer/docker-postgres.yml .","title":"postgres - build"},{"location":"developer/tasks/#postgres-up","text":"Build and start docker compose services in .devcontainer/docker-postgres.yml . Connection string is postgres://postgres:postgres@localhost:5432/postgres . Services include pgAdmin and PgHero .","title":"postgres - up"},{"location":"developer/tasks/#postgres-down","text":"Stop and destroy docker compose services in .devcontainer/docker-postgres.yml .","title":"postgres - down"},{"location":"user/start/","text":"Start","title":"Start"},{"location":"user/start/#start","text":"","title":"Start"}]}