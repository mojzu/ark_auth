{
  // See https://go.microsoft.com/fwlink/?LinkId=733558
  // for the documentation about the tasks.json format
  "version": "2.0.0",
  "tasks": [
    {
      "label": "postgres - build",
      "type": "shell",
      "group": "build",
      "command": "docker-compose -f .devcontainer/docker-postgres.yml build",
      "problemMatcher": []
    },
    {
      "label": "postgres - up",
      "type": "shell",
      "command": "docker-compose -f .devcontainer/docker-postgres.yml up",
      "problemMatcher": [],
      "dependsOn": [
        "postgres - build"
      ]
    },
    {
      "label": "postgres - down",
      "type": "shell",
      "command": "docker-compose -f .devcontainer/docker-postgres.yml down",
      "problemMatcher": []
    },
    {
      "label": "postgres - read sample configuration file",
      "type": "shell",
      "command": "docker run -i --rm sso/build-postgres:latest cat /usr/share/postgresql/postgresql.conf.sample > postgres.conf",
      "problemMatcher": [],
      "dependsOn": [
        "postgres - build"
      ]
    },
    {
      "label": "postgres - bash",
      "type": "shell",
      "command": "docker-compose -f .devcontainer/docker-postgres.yml exec postgres /bin/bash",
      "problemMatcher": []
    },
    {
      "label": "postgres - psql",
      "type": "shell",
      "command": "docker-compose -f .devcontainer/docker-postgres.yml exec postgres psql -U postgres -d postgres",
      "problemMatcher": []
    },
    {
      "label": "postgres - backup",
      "type": "shell",
      "command": "docker-compose -f .devcontainer/docker-postgres.yml exec postgres sh -c 'pg_dump -U postgres --format=custom postgres > postgres.pgdump'",
      "problemMatcher": []
    },
    {
      "label": "postgres - restore",
      "type": "shell",
      "command": "docker-compose -f .devcontainer/docker-postgres.yml exec postgres sh -c 'pg_restore -O -x -U postgres -d postgres postgres.pgdump'",
      "problemMatcher": []
    },
    {
      "label": "postgres - run pgtap tests",
      "type": "shell",
      "group": "test",
      "command": "docker-compose -f .devcontainer/docker-postgres.yml exec postgres sh -c 'pg_prove -U postgres test/*.sql'",
      "problemMatcher": []
    },
    {
      "label": "docker - build",
      "type": "shell",
      "group": "build",
      "command": "docker-compose -f .devcontainer/docker-build.yml build",
      "problemMatcher": []
    },
    {
      "label": "openapi - update generator image",
      "type": "shell",
      "command": "docker pull openapitools/openapi-generator-cli",
      "problemMatcher": [],
    },
    {
      "label": "openapi - _1",
      "type": "shell",
      "command": "rm -rf /workspace/sso_test/client && mkdir -p /workspace/sso_test/client",
      "problemMatcher": []
    },
    {
      "label": "openapi - _2",
      "type": "shell",
      "command": "docker run --rm -v '${env:LOCAL_WORKSPACE_FOLDER}/sso_test:/workspace' --network host openapitools/openapi-generator-cli generate -i http://localhost:7042/openapi.json -g typescript-node -o /workspace/client",
      "problemMatcher": [],
      "dependsOn": [
        "openapi - _1"
      ]
    },
    {
      "label": "openapi - generate client",
      "type": "shell",
      "command": "sudo chown vscode:vscode -R /workspace/sso_test && (cd /workspace/sso_test/client && rm -rf .openapi-generator .gitignore .openapi-generator-ignore git_push.sh)",
      "problemMatcher": [],
      "dependsOn": [
        "openapi - _2"
      ]
    },
    {
      "label": "docker test - build",
      "type": "shell",
      "group": "build",
      "command": "docker-compose -f .devcontainer/docker-build.yml -f .devcontainer/docker-test.yml build",
      "problemMatcher": []
    },
    {
      "label": "docker test - build (no cache)",
      "type": "shell",
      "group": "build",
      "command": "docker-compose -f .devcontainer/docker-build.yml -f .devcontainer/docker-test.yml build --no-cache",
      "problemMatcher": []
    },
    {
      "label": "docker test - up",
      "type": "shell",
      "command": "docker-compose -f .devcontainer/docker-test.yml up",
      "problemMatcher": [],
      "dependsOn": [
        "docker test - build"
      ]
    },
    {
      "label": "docker test - protractor",
      "type": "shell",
      "command": "docker-compose -f .devcontainer/docker-test.yml run --rm --entrypoint 'npm run protractor sso_test/tmp/conf.docker.js' protractor",
      "problemMatcher": [],
    },
    {
      "label": "docker test - down",
      "type": "shell",
      "command": "docker-compose -f .devcontainer/docker-test.yml down",
      "problemMatcher": []
    },
    {
      "label": "docker test - remove images",
      "type": "shell",
      "command": "docker-compose -f .devcontainer/docker-test.yml down --rmi all -v",
      "problemMatcher": []
    },
    {
      "label": "cargo - audit",
      "type": "shell",
      "command": "cargo audit",
      "problemMatcher": []
    },
    {
      "label": "cargo - sort dependencies",
      "type": "shell",
      "command": "cargo sort-ck -w",
      "problemMatcher": []
    },
    {
      "label": "cargo - check",
      "type": "shell",
      "command": "cargo check",
      "problemMatcher": []
    },
    {
      "label": "cargo - build",
      "type": "shell",
      "command": "cargo build",
      "problemMatcher": [],
      "dependsOn": [
        "cargo - fmt"
      ]
    },
    {
      "label": "cargo - build release",
      "type": "shell",
      "command": "cargo build --release",
      "problemMatcher": [],
      "dependsOn": [
        "cargo - fmt"
      ]
    },
    {
      "label": "cargo - install",
      "type": "shell",
      "command": "cargo install --path .",
      "problemMatcher": []
    },
    {
      "label": "cargo - update",
      "type": "shell",
      "command": "cargo update",
      "problemMatcher": []
    },
    {
      "label": "cargo - fmt",
      "type": "shell",
      "command": "cargo fmt",
      "problemMatcher": []
    },
    {
      "label": "cargo - doc",
      "type": "shell",
      "command": "cargo doc --no-deps",
      "problemMatcher": []
    },
    {
      "label": "cargo - clippy",
      "type": "shell",
      "command": "cargo clippy",
      "problemMatcher": []
    },
    {
      "label": "cargo - test",
      "type": "shell",
      "command": "cargo test",
      "problemMatcher": []
    },
    {
      "label": "cargo - sso_cli postgres setup",
      "type": "shell",
      "command": "cargo run --bin sso_cli -- postgres setup",
      "problemMatcher": []
    },
    {
      "label": "cargo - sso_cli postgres teardown",
      "type": "shell",
      "command": "cargo run --bin sso_cli -- postgres teardown",
      "problemMatcher": []
    },
    {
      "label": "cargo - sso_server",
      "type": "shell",
      "command": "cargo run --bin sso_server",
      "problemMatcher": []
    },
    {
      "label": "npm - install",
      "type": "shell",
      "command": "npm install",
      "problemMatcher": []
    },
    {
      "label": "npm - update packages",
      "type": "shell",
      "command": "ncu -u",
      "problemMatcher": []
    },
    {
      "label": "npm - start client example (express, passport)",
      "type": "shell",
      "command": "npm run start",
      "problemMatcher": []
    },
    {
      "label": "npm - run host tests",
      "type": "shell",
      "command": "npm run test",
      "problemMatcher": []
    },
    {
      "label": "npm - run template builder",
      "type": "shell",
      "command": "npm run template",
      "problemMatcher": []
    },
    {
      "label": "all - clean",
      "type": "shell",
      "command": "cargo clean && npm run clean",
      "problemMatcher": []
    },
    {
      "label": "all - distclean",
      "type": "shell",
      "command": "rm -rf .cargo && npm run distclean",
      "problemMatcher": [],
      "dependsOn": [
        "all - clean"
      ]
    },
    {
      "label": "mkdocs - serve",
      "type": "shell",
      "command": "docker run --rm -v '${env:LOCAL_WORKSPACE_FOLDER}:/workspace' -p 8079:8079 sso/build-mkdocs:latest serve",
      "problemMatcher": []
    },
    {
      "label": "mkdocs - _1",
      "type": "shell",
      "command": "rm -rf /workspace/docs",
      "problemMatcher": []
    },
    {
      "label": "mkdocs - _2",
      "type": "shell",
      "command": "docker run --rm -v '${env:LOCAL_WORKSPACE_FOLDER}:/workspace' -p 8079:8079 sso/build-mkdocs:latest build",
      "problemMatcher": [],
      "dependsOn": [
        "mkdocs - _1"
      ]
    },
    {
      "label": "mkdocs - build",
      "type": "shell",
      "command": "sudo chown vscode:vscode -R /workspace/docs",
      "problemMatcher": [],
      "dependsOn": [
        "mkdocs - _2"
      ],
    },
  ]
}
